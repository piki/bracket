#!/usr/bin/perl -w

#$canned = 1;

# args
if ($ARGV[0] && $ARGV[0] =~ /^\d{4}[mnwc]$/) {
	$tourney = $ARGV[0] || "2016m";
	shift;
}
else { $tourney = "2016m"; }
if ($ARGV[0] && $ARGV[0] =~ /^(\d{8})$/) { $date = $1; }

# common setup
scalar %game;  # suppress a warning about $game being used only once
require 'bracket.pl';
setup("$tourney/teams");
my @actual = @{(read_winners("$tourney/actual"))[0]};
foreach (keys %team) { $reverse{$team{$_}} = $_; }

# read the file we're about to clobber
open(ACTUAL, "$tourney/actual");
while (<ACTUAL>) {
	chomp;
	if (/^(\d+)\s+/) {
		$out{$1} = $_;
	}
}

# team short-name mappings
open(INP, "<teams-espn-map");
while (<INP>) {
	/(.*) => (.*)/ || next;
	$rename{$1} = $2;
}

# create %lookup array to map "$team1$team2" => game number
foreach my $g (1..31) {
	if ($actual[$g*2] && $actual[$g*2+1]) {
		$lookup{$team{$actual[$g*2]}.$team{$actual[$g*2+1]}} = $g;
		$lookup{$team{$actual[$g*2+1]}.$team{$actual[$g*2]}} = $g;
	}
}
foreach my $g (32..63) {
	my ($a, $b) = split/,/, $game{$g};
	next if !$team{$a} || !$team{$b};
	$lookup{$team{$a}.$team{$b}} = $g;
	$lookup{$team{$b}.$team{$a}} = $g;
}

# scrape an ESPN scoreboard page
my ($sport, $confId);
if ($tourney =~ /m$/) { $sport = "collegebasketball"; $confId = "ncaa-tournament"; }
elsif ($tourney =~ /n$/) { $sport = "collegebasketball"; $confId = "nit"; }
elsif ($tourney =~ /c$/) { $sport = "collegebasketball"; $confId = "cit"; }
elsif ($tourney =~ /w$/) { $sport = "ncw"; $confId = 100; }
my $url = "http://www.cbssports.com/$sport/scoreboard/$confId";
if ($date) { $url .= "/$date"; }
print STDERR "$url\n";
if ($canned) {
	open(WGET, "<scoreboard.html");
}
else {
	open(WGET, "wget -qO - \"$url\"|") || die "wget: $!";
	open(SCOREBOARD, ">scoreboard.html");
}
while (<WGET>) {
	my $g;
	print SCOREBOARD if !$canned;
	if (m!awayTeam".*?teamLocation"><a href=.*?>([^>]+)</a>!) {
		$away = $1;
		$away = $rename{$away} || $away;
		#print STDERR "away=\"$away\"\n";
	}
	if (m!homeTeam".*?teamLocation"><a href=.*?>([^>]+)</a>!) {
		$home = $1;
		$home = $rename{$home} || $home;
		#print STDERR "home=\"$home\"\n";
	}
	if (m!gameInfo!) {
		$g = $lookup{$home.$away};
		if (!$g) {
			print STDERR "Can't find game number for \"$home\" vs. \"$away\"\n";
			next;
		}
		#print STDERR "g=$g\n";
		$state{$g}{away} = $away;
		$state{$g}{home} = $home;
	}
	if (/><td class="finalStatus"[^>]*>(Final.*?)</) {
		$state{$g}{clock} = $1;
		#print STDERR "clock=\"$state{$g}{clock}\"\n";
	}
	elsif (m!><td class="gameStatus"[^>]*>(.*?)<!) {
		$state{$g}{clock} = $1;
		#print STDERR "clock=\"$state{$g}{clock}\"\n";
	}
	elsif (m!"gameDate">.*?>(\d+:\d+ .M.*?)<!) {
		$state{$g}{clock} = $1;
		#print STDERR "clock=\"$state{$g}{clock}\"\n";
	}
	if (/awayTeam.*"finalScore">(\d+)<.*homeTeam.*"finalScore">(\d+)</) {
		$state{$g}{away_score} = $1;
		$state{$g}{home_score} = $2;
		#print STDERR "score=\"$state{$g}{away_score}\" to \"$state{$g}{home_score}\"\n";
	}
}

#show_and_set_out();
show_and_set_out();

open(ACTUAL, ">$tourney/actual.new");
foreach (sort {$b <=> $a} keys %out) {
	print ACTUAL "$out{$_}\n";
}
rename("$tourney/actual.new", "$tourney/actual");

my %warned_not_found;

sub show_and_set_out {
	foreach $g (sort { timeleft($state{$a}{clock}) <=> timeleft($state{$b}{clock}) } keys %state) {
		next if !defined $state{$g}{home_score} && !defined $state{$g}{away_score};
		my ($ot) = $state{$g}{clock} =~ /^Final - (\d*)\w*\s*OT/;
		$ot = defined $ot ? " ${ot}OT" : "";
		my $gstring;
		if ($state{$g}{home_score} > $state{$g}{away_score}) {
			$gstring = "$g $reverse{$state{$g}{home}} $state{$g}{home_score}-$state{$g}{away_score}$ot";
			$out{$g} = $gstring if $state{$g}{clock} =~ /^Final/;
		}
		else {
			$gstring = "$g $reverse{$state{$g}{away}} $state{$g}{away_score}-$state{$g}{home_score}$ot";
			$out{$g} = $gstring if $state{$g}{clock} =~ /^Final/;
		}
		printf STDERR "%-20s # %16s  %-27s    %s\n",
			$gstring, "[$state{$g}{clock}]", "($reverse{$state{$g}{home}}) $state{$g}{home} - $state{$g}{home_score}",
			"($reverse{$state{$g}{away}}) $state{$g}{away} - $state{$g}{away_score}";
	}
}

sub timeleft {
	if ($_[0] =~ /^Final\b/) { return 0; }
	if ($_[0] eq "Halftime" || $_[0] eq "End of 1st Half") { return 20*60; }
	if ($_[0] =~ /(\d+):(\d+) 1st/) { return $1*60 + $2 + 20*60; }
	if ($_[0] =~ /(\d+):(\d+) 2nd/) { return $1*60 + $2; }
	if ($_[0] =~ /(\d+):(\d+) PM/) { return $1*3600 + $2*60 + 40*60; }
	print STDERR "timeleft?? \"$_[0]\"\n";
	return 0;
}
